
proj9_resuming_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb0  08004eb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a1c  20000010  08004ec8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a2c  08004ec8  00024a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d2e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff0  00000000  00000000  00036d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039d1  00000000  00000000  0003c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c93  00000000  00000000  0003fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098572  00000000  00000000  000549fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecf6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  000ecfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e20 	.word	0x08004e20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004e20 	.word	0x08004e20

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fab3 	bl	8000a54 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f8b5 	bl	800065c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f93b 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f90f 	bl	8000718 <MX_USART2_UART_Init>


  xTaskCreate(vBlueLEDcontrollerTask, //pvTaskCode
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <main+0x60>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	4910      	ldr	r1, [pc, #64]	; (8000548 <main+0x64>)
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <main+0x68>)
 800050a:	f002 fd58 	bl	8002fbe <xTaskCreate>
		  NULL, 	// pvParameters
		  1,		// uxPriority
		  &blue_handle);	// *pxCreatedTask


  xTaskCreate(vRedLEDcontrollerTask, //pvTaskCode
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <main+0x6c>)
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2264      	movs	r2, #100	; 0x64
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <main+0x70>)
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <main+0x74>)
 800051e:	f002 fd4e 	bl	8002fbe <xTaskCreate>
		  100,		// usStackDepth
		  NULL, 	// pvParameters
		  1,		// uxPriority
		  &red_handle);	// *pxCreatedTask

  xTaskCreate(vGreenLEDcontrollerTask, //pvTaskCode
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x78>)
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2264      	movs	r2, #100	; 0x64
 800052e:	490c      	ldr	r1, [pc, #48]	; (8000560 <main+0x7c>)
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x80>)
 8000532:	f002 fd44 	bl	8002fbe <xTaskCreate>
 		  NULL, 	// pvParameters
 		  1,		// uxPriority
   	  	  &green_handle);	// *pxCreatedTask


  vTaskStartScheduler();
 8000536:	f002 ff8d 	bl	8003454 <vTaskStartScheduler>
 800053a:	2300      	movs	r3, #0


}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000007c 	.word	0x2000007c
 8000548:	08004e38 	.word	0x08004e38
 800054c:	08000569 	.word	0x08000569
 8000550:	20000080 	.word	0x20000080
 8000554:	08004e4c 	.word	0x08004e4c
 8000558:	08000599 	.word	0x08000599
 800055c:	20000084 	.word	0x20000084
 8000560:	08004e60 	.word	0x08004e60
 8000564:	080005f1 	.word	0x080005f1

08000568 <vBlueLEDcontrollerTask>:

void vBlueLEDcontrollerTask(void *pvParameters) {
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	while(1){
		BlueTaskProfiler++;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <vBlueLEDcontrollerTask+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a06      	ldr	r2, [pc, #24]	; (8000590 <vBlueLEDcontrollerTask+0x28>)
 8000578:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 1000000; i++) {} // "delay"
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e002      	b.n	8000586 <vBlueLEDcontrollerTask+0x1e>
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4a02      	ldr	r2, [pc, #8]	; (8000594 <vBlueLEDcontrollerTask+0x2c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	ddf8      	ble.n	8000580 <vBlueLEDcontrollerTask+0x18>
		BlueTaskProfiler++;
 800058e:	e7ef      	b.n	8000570 <vBlueLEDcontrollerTask+0x8>
 8000590:	20000070 	.word	0x20000070
 8000594:	000f423f 	.word	0x000f423f

08000598 <vRedLEDcontrollerTask>:

	};
}


void vRedLEDcontrollerTask(void *pvParameters) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while(1){
		RedTaskProfiler++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <vRedLEDcontrollerTask+0x48>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <vRedLEDcontrollerTask+0x48>)
 80005a8:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 1000000; i++) {} // "delay"
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e002      	b.n	80005b6 <vRedLEDcontrollerTask+0x1e>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <vRedLEDcontrollerTask+0x4c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	ddf8      	ble.n	80005b0 <vRedLEDcontrollerTask+0x18>

		suspend_monitor++;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vRedLEDcontrollerTask+0x50>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vRedLEDcontrollerTask+0x50>)
 80005c6:	6013      	str	r3, [r2, #0]
		if (suspend_monitor >= 10) {
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vRedLEDcontrollerTask+0x50>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d9e7      	bls.n	80005a0 <vRedLEDcontrollerTask+0x8>
			isSuspended = true;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <vRedLEDcontrollerTask+0x54>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(NULL);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f002 fe36 	bl	8003248 <vTaskSuspend>
		RedTaskProfiler++;
 80005dc:	e7e0      	b.n	80005a0 <vRedLEDcontrollerTask+0x8>
 80005de:	bf00      	nop
 80005e0:	20000074 	.word	0x20000074
 80005e4:	000f423f 	.word	0x000f423f
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000090 	.word	0x20000090

080005f0 <vGreenLEDcontrollerTask>:

		}
	};
}

void vGreenLEDcontrollerTask(void *pvParameters) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	while(1){
		GreenTaskProfiler++;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <vGreenLEDcontrollerTask+0x58>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <vGreenLEDcontrollerTask+0x58>)
 8000600:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 1000000; i++) {} // "delay"
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e002      	b.n	800060e <vGreenLEDcontrollerTask+0x1e>
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <vGreenLEDcontrollerTask+0x5c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	ddf8      	ble.n	8000608 <vGreenLEDcontrollerTask+0x18>
		if (isSuspended) {
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <vGreenLEDcontrollerTask+0x60>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0ec      	beq.n	80005f8 <vGreenLEDcontrollerTask+0x8>
			resume_monitor++;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <vGreenLEDcontrollerTask+0x64>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <vGreenLEDcontrollerTask+0x64>)
 8000626:	6013      	str	r3, [r2, #0]
			if (resume_monitor > 10) {
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <vGreenLEDcontrollerTask+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b0a      	cmp	r3, #10
 800062e:	d9e3      	bls.n	80005f8 <vGreenLEDcontrollerTask+0x8>
				isSuspended = false;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <vGreenLEDcontrollerTask+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
				resume_monitor = 0;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <vGreenLEDcontrollerTask+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
				vTaskResume(red_handle);
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <vGreenLEDcontrollerTask+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fea9 	bl	8003398 <vTaskResume>
		GreenTaskProfiler++;
 8000646:	e7d7      	b.n	80005f8 <vGreenLEDcontrollerTask+0x8>
 8000648:	20000078 	.word	0x20000078
 800064c:	000f423f 	.word	0x000f423f
 8000650:	20000090 	.word	0x20000090
 8000654:	2000008c 	.word	0x2000008c
 8000658:	20000080 	.word	0x20000080

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fbd0 	bl	8004e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xb4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xb4>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xb4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <SystemClock_Config+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <SystemClock_Config+0xb8>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <SystemClock_Config+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fc69 	bl	8000fa4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d8:	f000 f874 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fecc 	bl	8001494 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000702:	f000 f85f 	bl	80007c4 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f001 fb32 	bl	8001db8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f833 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000002c 	.word	0x2000002c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_GPIO_Init+0x30>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <MX_GPIO_Init+0x30>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_GPIO_Init+0x30>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f971 	bl	8000a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010000 	.word	0x40010000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <HAL_MspInit+0x54>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_MspInit+0x54>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 fa17 	bl	8000c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a19      	ldr	r2, [pc, #100]	; (80008ac <HAL_UART_MspInit+0x84>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12b      	bne.n	80008a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800089e:	f000 f9fd 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_InitTick+0xd0>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_InitTick+0xd0>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6453      	str	r3, [r2, #68]	; 0x44
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_InitTick+0xd0>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f107 020c 	add.w	r2, r7, #12
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ffb0 	bl	8001854 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f4:	f000 ff9a 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 80008f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	4a23      	ldr	r2, [pc, #140]	; (800098c <HAL_InitTick+0xd4>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	0c9b      	lsrs	r3, r3, #18
 8000904:	3b01      	subs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_InitTick+0xd8>)
 800090a:	4a22      	ldr	r2, [pc, #136]	; (8000994 <HAL_InitTick+0xdc>)
 800090c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_InitTick+0xd8>)
 8000910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_InitTick+0xd8>)
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_InitTick+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_InitTick+0xd8>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800092e:	4818      	ldr	r0, [pc, #96]	; (8000990 <HAL_InitTick+0xd8>)
 8000930:	f000 ffc2 	bl	80018b8 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800093e:	2b00      	cmp	r3, #0
 8000940:	d11b      	bne.n	800097a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000942:	4813      	ldr	r0, [pc, #76]	; (8000990 <HAL_InitTick+0xd8>)
 8000944:	f001 f812 	bl	800196c <HAL_TIM_Base_Start_IT>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800094e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000952:	2b00      	cmp	r3, #0
 8000954:	d111      	bne.n	800097a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000956:	2019      	movs	r0, #25
 8000958:	f000 f992 	bl	8000c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b0f      	cmp	r3, #15
 8000960:	d808      	bhi.n	8000974 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000962:	2200      	movs	r2, #0
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	2019      	movs	r0, #25
 8000968:	f000 f96e 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_InitTick+0xe0>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e002      	b.n	800097a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800097a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800097e:	4618      	mov	r0, r3
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	431bde83 	.word	0x431bde83
 8000990:	20000094 	.word	0x20000094
 8000994:	40010000 	.word	0x40010000
 8000998:	20000004 	.word	0x20000004

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ce:	f001 f82f 	bl	8001a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000094 	.word	0x20000094

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2a:	f7ff ffd7 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f004 f9bd 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd57 	bl	80004e4 <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a44:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 8000a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a4c:	20004a2c 	.word	0x20004a2c

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <HAL_Init+0x40>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_Init+0x40>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x40>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f8d8 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f7ff ff18 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fea2 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000dc 	.word	0x200000dc

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000dc 	.word	0x200000dc

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff4c 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff61 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb1 	bl	8000bcc <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff80 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff54 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e159      	b.n	8000f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8148 	bne.w	8000f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a2 	beq.w	8000f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1fe>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1f6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1f2>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f aea2 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e267      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d075      	beq.n	80010ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	4b85      	ldr	r3, [pc, #532]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d112      	bne.n	8001000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fda:	4b82      	ldr	r3, [pc, #520]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fe6:	d10b      	bne.n	8001000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	4b7e      	ldr	r3, [pc, #504]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d05b      	beq.n	80010ac <HAL_RCC_OscConfig+0x108>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d157      	bne.n	80010ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e242      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d106      	bne.n	8001018 <HAL_RCC_OscConfig+0x74>
 800100a:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a75      	ldr	r2, [pc, #468]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e01d      	b.n	8001054 <HAL_RCC_OscConfig+0xb0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x98>
 8001022:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6f      	ldr	r2, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6c      	ldr	r2, [pc, #432]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0xb0>
 800103c:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a68      	ldr	r2, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a65      	ldr	r2, [pc, #404]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d013      	beq.n	8001084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fd30 	bl	8000ac0 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fd2c 	bl	8000ac0 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e207      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0xc0>
 8001082:	e014      	b.n	80010ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fd1c 	bl	8000ac0 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fd18 	bl	8000ac0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e1f3      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	4b51      	ldr	r3, [pc, #324]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0xe8>
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d063      	beq.n	8001182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ba:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d11c      	bne.n	800110c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d2:	4b44      	ldr	r3, [pc, #272]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d116      	bne.n	800110c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_RCC_OscConfig+0x152>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e1c7      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4937      	ldr	r1, [pc, #220]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	e03a      	b.n	8001182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_OscConfig+0x244>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fcd1 	bl	8000ac0 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fccd 	bl	8000ac0 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e1a8      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4925      	ldr	r1, [pc, #148]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x244>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fcb0 	bl	8000ac0 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fcac 	bl	8000ac0 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e187      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d036      	beq.n	80011fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d016      	beq.n	80011c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_RCC_OscConfig+0x248>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fc90 	bl	8000ac0 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc8c 	bl	8000ac0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e167      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_RCC_OscConfig+0x240>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x200>
 80011c2:	e01b      	b.n	80011fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_RCC_OscConfig+0x248>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fc79 	bl	8000ac0 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	e00e      	b.n	80011f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc75 	bl	8000ac0 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d907      	bls.n	80011f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e150      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
 80011e4:	40023800 	.word	0x40023800
 80011e8:	42470000 	.word	0x42470000
 80011ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ea      	bne.n	80011d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8097 	beq.w	8001338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a7c      	ldr	r2, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b77      	ldr	r3, [pc, #476]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a73      	ldr	r2, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fc35 	bl	8000ac0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff fc31 	bl	8000ac0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e10c      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_OscConfig+0x474>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x2ea>
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a63      	ldr	r2, [pc, #396]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
 800128c:	e01c      	b.n	80012c8 <HAL_RCC_OscConfig+0x324>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x30c>
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6713      	str	r3, [r2, #112]	; 0x70
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x324>
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012c2:	f023 0304 	bic.w	r3, r3, #4
 80012c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d015      	beq.n	80012fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fbf6 	bl	8000ac0 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	e00a      	b.n	80012ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff fbf2 	bl	8000ac0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0cb      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0ee      	beq.n	80012d8 <HAL_RCC_OscConfig+0x334>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fbe0 	bl	8000ac0 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fbdc 	bl	8000ac0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0b5      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ee      	bne.n	8001304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a1 	beq.w	8001484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d05c      	beq.n	8001408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d141      	bne.n	80013da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_RCC_OscConfig+0x478>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fbb0 	bl	8000ac0 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fbac 	bl	8000ac0 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e087      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	019b      	lsls	r3, r3, #6
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	061b      	lsls	r3, r3, #24
 80013a6:	491b      	ldr	r1, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x478>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb85 	bl	8000ac0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb81 	bl	8000ac0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e05c      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x416>
 80013d8:	e054      	b.n	8001484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_OscConfig+0x478>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb6e 	bl	8000ac0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fb6a 	bl	8000ac0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e045      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x470>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x444>
 8001406:	e03d      	b.n	8001484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e038      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000
 800141c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x4ec>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d028      	beq.n	8001480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d121      	bne.n	8001480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d11a      	bne.n	8001480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001450:	4013      	ands	r3, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001458:	4293      	cmp	r3, r2
 800145a:	d111      	bne.n	8001480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	3b01      	subs	r3, #1
 800146a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d107      	bne.n	8001480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0cc      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d90c      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d044      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d119      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d003      	beq.n	8001552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e067      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4934      	ldr	r1, [pc, #208]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff fa9c 	bl	8000ac0 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff fa98 	bl	8000ac0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e04f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 020c 	and.w	r2, r3, #12
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1eb      	bne.n	800158c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d20c      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f821 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800161e:	4602      	mov	r2, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	5ccb      	ldrb	r3, [r1, r3]
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f93c 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00
 8001650:	40023800 	.word	0x40023800
 8001654:	08004e90 	.word	0x08004e90
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001664:	b090      	sub	sp, #64	; 0x40
 8001666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
 800166c:	2300      	movs	r3, #0
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001678:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d00d      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001684:	2b08      	cmp	r3, #8
 8001686:	f200 80a1 	bhi.w	80017cc <HAL_RCC_GetSysClockFreq+0x16c>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x34>
 800168e:	2b04      	cmp	r3, #4
 8001690:	d003      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0x3a>
 8001692:	e09b      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001698:	e09b      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800169a:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800169e:	e098      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d028      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	099b      	lsrs	r3, r3, #6
 80016bc:	2200      	movs	r2, #0
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	627a      	str	r2, [r7, #36]	; 0x24
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016c8:	2100      	movs	r1, #0
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016cc:	fb03 f201 	mul.w	r2, r3, r1
 80016d0:	2300      	movs	r3, #0
 80016d2:	fb00 f303 	mul.w	r3, r0, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016da:	fba0 1202 	umull	r1, r2, r0, r2
 80016de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016e0:	460a      	mov	r2, r1
 80016e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80016e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e6:	4413      	add	r3, r2
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ec:	2200      	movs	r2, #0
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	61fa      	str	r2, [r7, #28]
 80016f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016fa:	f7fe fd71 	bl	80001e0 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4613      	mov	r3, r2
 8001704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001706:	e053      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	2200      	movs	r2, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	617a      	str	r2, [r7, #20]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800171a:	f04f 0b00 	mov.w	fp, #0
 800171e:	4652      	mov	r2, sl
 8001720:	465b      	mov	r3, fp
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	0159      	lsls	r1, r3, #5
 800172c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001730:	0150      	lsls	r0, r2, #5
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ebb2 080a 	subs.w	r8, r2, sl
 800173a:	eb63 090b 	sbc.w	r9, r3, fp
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800174a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800174e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001752:	ebb2 0408 	subs.w	r4, r2, r8
 8001756:	eb63 0509 	sbc.w	r5, r3, r9
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	00eb      	lsls	r3, r5, #3
 8001764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001768:	00e2      	lsls	r2, r4, #3
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	eb14 030a 	adds.w	r3, r4, sl
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	eb45 030b 	adc.w	r3, r5, fp
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001786:	4629      	mov	r1, r5
 8001788:	028b      	lsls	r3, r1, #10
 800178a:	4621      	mov	r1, r4
 800178c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001790:	4621      	mov	r1, r4
 8001792:	028a      	lsls	r2, r1, #10
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179a:	2200      	movs	r2, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	60fa      	str	r2, [r7, #12]
 80017a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a4:	f7fe fd1c 	bl	80001e0 <__aeabi_uldivmod>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4613      	mov	r3, r2
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	3301      	adds	r3, #1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ca:	e002      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3740      	adds	r7, #64	; 0x40
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	00f42400 	.word	0x00f42400
 80017e8:	017d7840 	.word	0x017d7840

080017ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_GetHCLKFreq+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001808:	f7ff fff0 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0a9b      	lsrs	r3, r3, #10
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4903      	ldr	r1, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	08004ea0 	.word	0x08004ea0

0800182c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001830:	f7ff ffdc 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	0b5b      	lsrs	r3, r3, #13
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4903      	ldr	r1, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	08004ea0 	.word	0x08004ea0

08001854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	220f      	movs	r2, #15
 8001862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCC_GetClockConfig+0x60>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0207 	and.w	r2, r3, #7
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e041      	b.n	800194e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f839 	bl	8001956 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f000 f9ca 	bl	8001c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d001      	beq.n	8001984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e044      	b.n	8001a0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_TIM_Base_Start_IT+0xb0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d018      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x6c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d013      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x6c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_TIM_Base_Start_IT+0xb4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00e      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x6c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_TIM_Base_Start_IT+0xb8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x6c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_TIM_Base_Start_IT+0xbc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_TIM_Base_Start_IT+0x6c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <HAL_TIM_Base_Start_IT+0xc0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d111      	bne.n	80019fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d010      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fa:	e007      	b.n	8001a0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40000c00 	.word	0x40000c00
 8001a2c:	40014000 	.word	0x40014000

08001a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d122      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d11b      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0202 	mvn.w	r2, #2
 8001a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8ee 	bl	8001c54 <HAL_TIM_IC_CaptureCallback>
 8001a78:	e005      	b.n	8001a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8e0 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8f1 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d122      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0204 	mvn.w	r2, #4
 8001ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8c4 	bl	8001c54 <HAL_TIM_IC_CaptureCallback>
 8001acc:	e005      	b.n	8001ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8b6 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8c7 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d122      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d11b      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0208 	mvn.w	r2, #8
 8001b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f89a 	bl	8001c54 <HAL_TIM_IC_CaptureCallback>
 8001b20:	e005      	b.n	8001b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f88c 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f89d 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0210 	mvn.w	r2, #16
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f870 	bl	8001c54 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f862 	bl	8001c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f873 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10e      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0201 	mvn.w	r2, #1
 8001bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fdf6 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	2b80      	cmp	r3, #128	; 0x80
 8001bc0:	d10e      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d107      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8e2 	bl	8001da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b40      	cmp	r3, #64	; 0x40
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d107      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f838 	bl	8001c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0220 	mvn.w	r2, #32
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8ac 	bl	8001d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a34      	ldr	r2, [pc, #208]	; (8001d74 <TIM_Base_SetConfig+0xe4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00f      	beq.n	8001cc8 <TIM_Base_SetConfig+0x38>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d00b      	beq.n	8001cc8 <TIM_Base_SetConfig+0x38>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a31      	ldr	r2, [pc, #196]	; (8001d78 <TIM_Base_SetConfig+0xe8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <TIM_Base_SetConfig+0x38>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <TIM_Base_SetConfig+0xec>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d003      	beq.n	8001cc8 <TIM_Base_SetConfig+0x38>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <TIM_Base_SetConfig+0xf0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d108      	bne.n	8001cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <TIM_Base_SetConfig+0xe4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01b      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d017      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <TIM_Base_SetConfig+0xe8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <TIM_Base_SetConfig+0xec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00f      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <TIM_Base_SetConfig+0xf0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00b      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <TIM_Base_SetConfig+0xf4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <TIM_Base_SetConfig+0xf8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d003      	beq.n	8001d1a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <TIM_Base_SetConfig+0xfc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d108      	bne.n	8001d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <TIM_Base_SetConfig+0xe4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d103      	bne.n	8001d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40014400 	.word	0x40014400
 8001d8c:	40014800 	.word	0x40014800

08001d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e03f      	b.n	8001e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fd22 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f829 	bl	8001e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e58:	b0c0      	sub	sp, #256	; 0x100
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	68d9      	ldr	r1, [r3, #12]
 8001e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	ea40 0301 	orr.w	r3, r0, r1
 8001e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001eac:	f021 010c 	bic.w	r1, r1, #12
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ece:	6999      	ldr	r1, [r3, #24]
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	ea40 0301 	orr.w	r3, r0, r1
 8001eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <UART_SetConfig+0x2cc>)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d005      	beq.n	8001ef4 <UART_SetConfig+0xa0>
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b8d      	ldr	r3, [pc, #564]	; (8002124 <UART_SetConfig+0x2d0>)
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d104      	bne.n	8001efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ef4:	f7ff fc9a 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 8001ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001efc:	e003      	b.n	8001f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001efe:	f7ff fc81 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f10:	f040 810c 	bne.w	800212c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
 8001f2a:	1891      	adds	r1, r2, r2
 8001f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f2e:	415b      	adcs	r3, r3
 8001f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f36:	4621      	mov	r1, r4
 8001f38:	eb12 0801 	adds.w	r8, r2, r1
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	eb43 0901 	adc.w	r9, r3, r1
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f56:	4690      	mov	r8, r2
 8001f58:	4699      	mov	r9, r3
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	eb18 0303 	adds.w	r3, r8, r3
 8001f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f64:	462b      	mov	r3, r5
 8001f66:	eb49 0303 	adc.w	r3, r9, r3
 8001f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f82:	460b      	mov	r3, r1
 8001f84:	18db      	adds	r3, r3, r3
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
 8001f88:	4613      	mov	r3, r2
 8001f8a:	eb42 0303 	adc.w	r3, r2, r3
 8001f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f98:	f7fe f922 	bl	80001e0 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4b61      	ldr	r3, [pc, #388]	; (8002128 <UART_SetConfig+0x2d4>)
 8001fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	011c      	lsls	r4, r3, #4
 8001faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	1891      	adds	r1, r2, r2
 8001fc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fc4:	415b      	adcs	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fcc:	4641      	mov	r1, r8
 8001fce:	eb12 0a01 	adds.w	sl, r2, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fec:	4692      	mov	sl, r2
 8001fee:	469b      	mov	fp, r3
 8001ff0:	4643      	mov	r3, r8
 8001ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8002000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002018:	460b      	mov	r3, r1
 800201a:	18db      	adds	r3, r3, r3
 800201c:	643b      	str	r3, [r7, #64]	; 0x40
 800201e:	4613      	mov	r3, r2
 8002020:	eb42 0303 	adc.w	r3, r2, r3
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
 8002026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800202a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800202e:	f7fe f8d7 	bl	80001e0 <__aeabi_uldivmod>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4611      	mov	r1, r2
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <UART_SetConfig+0x2d4>)
 800203a:	fba3 2301 	umull	r2, r3, r3, r1
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2264      	movs	r2, #100	; 0x64
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	1acb      	subs	r3, r1, r3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <UART_SetConfig+0x2d4>)
 8002050:	fba3 2302 	umull	r2, r3, r3, r2
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800205c:	441c      	add	r4, r3
 800205e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002062:	2200      	movs	r2, #0
 8002064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800206c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002070:	4642      	mov	r2, r8
 8002072:	464b      	mov	r3, r9
 8002074:	1891      	adds	r1, r2, r2
 8002076:	63b9      	str	r1, [r7, #56]	; 0x38
 8002078:	415b      	adcs	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002080:	4641      	mov	r1, r8
 8002082:	1851      	adds	r1, r2, r1
 8002084:	6339      	str	r1, [r7, #48]	; 0x30
 8002086:	4649      	mov	r1, r9
 8002088:	414b      	adcs	r3, r1
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002098:	4659      	mov	r1, fp
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	4651      	mov	r1, sl
 800209e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a2:	4651      	mov	r1, sl
 80020a4:	00ca      	lsls	r2, r1, #3
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	4642      	mov	r2, r8
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020b4:	464b      	mov	r3, r9
 80020b6:	460a      	mov	r2, r1
 80020b8:	eb42 0303 	adc.w	r3, r2, r3
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020d4:	460b      	mov	r3, r1
 80020d6:	18db      	adds	r3, r3, r3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020da:	4613      	mov	r3, r2
 80020dc:	eb42 0303 	adc.w	r3, r2, r3
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020ea:	f7fe f879 	bl	80001e0 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <UART_SetConfig+0x2d4>)
 80020f4:	fba3 1302 	umull	r1, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2164      	movs	r1, #100	; 0x64
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <UART_SetConfig+0x2d4>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f003 0207 	and.w	r2, r3, #7
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4422      	add	r2, r4
 800211a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800211c:	e105      	b.n	800232a <UART_SetConfig+0x4d6>
 800211e:	bf00      	nop
 8002120:	40011000 	.word	0x40011000
 8002124:	40011400 	.word	0x40011400
 8002128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800213a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800213e:	4642      	mov	r2, r8
 8002140:	464b      	mov	r3, r9
 8002142:	1891      	adds	r1, r2, r2
 8002144:	6239      	str	r1, [r7, #32]
 8002146:	415b      	adcs	r3, r3
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800214e:	4641      	mov	r1, r8
 8002150:	1854      	adds	r4, r2, r1
 8002152:	4649      	mov	r1, r9
 8002154:	eb43 0501 	adc.w	r5, r3, r1
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	00eb      	lsls	r3, r5, #3
 8002162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002166:	00e2      	lsls	r2, r4, #3
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	4643      	mov	r3, r8
 800216e:	18e3      	adds	r3, r4, r3
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002174:	464b      	mov	r3, r9
 8002176:	eb45 0303 	adc.w	r3, r5, r3
 800217a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800218a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800219a:	4629      	mov	r1, r5
 800219c:	008b      	lsls	r3, r1, #2
 800219e:	4621      	mov	r1, r4
 80021a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021a4:	4621      	mov	r1, r4
 80021a6:	008a      	lsls	r2, r1, #2
 80021a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021ac:	f7fe f818 	bl	80001e0 <__aeabi_uldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4b60      	ldr	r3, [pc, #384]	; (8002338 <UART_SetConfig+0x4e4>)
 80021b6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	011c      	lsls	r4, r3, #4
 80021be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021d0:	4642      	mov	r2, r8
 80021d2:	464b      	mov	r3, r9
 80021d4:	1891      	adds	r1, r2, r2
 80021d6:	61b9      	str	r1, [r7, #24]
 80021d8:	415b      	adcs	r3, r3
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e0:	4641      	mov	r1, r8
 80021e2:	1851      	adds	r1, r2, r1
 80021e4:	6139      	str	r1, [r7, #16]
 80021e6:	4649      	mov	r1, r9
 80021e8:	414b      	adcs	r3, r1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f8:	4659      	mov	r1, fp
 80021fa:	00cb      	lsls	r3, r1, #3
 80021fc:	4651      	mov	r1, sl
 80021fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002202:	4651      	mov	r1, sl
 8002204:	00ca      	lsls	r2, r1, #3
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	4603      	mov	r3, r0
 800220c:	4642      	mov	r2, r8
 800220e:	189b      	adds	r3, r3, r2
 8002210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	460a      	mov	r2, r1
 8002218:	eb42 0303 	adc.w	r3, r2, r3
 800221c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	67bb      	str	r3, [r7, #120]	; 0x78
 800222a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002238:	4649      	mov	r1, r9
 800223a:	008b      	lsls	r3, r1, #2
 800223c:	4641      	mov	r1, r8
 800223e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002242:	4641      	mov	r1, r8
 8002244:	008a      	lsls	r2, r1, #2
 8002246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800224a:	f7fd ffc9 	bl	80001e0 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <UART_SetConfig+0x4e4>)
 8002254:	fba3 1302 	umull	r1, r3, r3, r2
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	2164      	movs	r1, #100	; 0x64
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	3332      	adds	r3, #50	; 0x32
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <UART_SetConfig+0x4e4>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	441c      	add	r4, r3
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2200      	movs	r2, #0
 800227a:	673b      	str	r3, [r7, #112]	; 0x70
 800227c:	677a      	str	r2, [r7, #116]	; 0x74
 800227e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002282:	4642      	mov	r2, r8
 8002284:	464b      	mov	r3, r9
 8002286:	1891      	adds	r1, r2, r2
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	415b      	adcs	r3, r3
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002292:	4641      	mov	r1, r8
 8002294:	1851      	adds	r1, r2, r1
 8002296:	6039      	str	r1, [r7, #0]
 8002298:	4649      	mov	r1, r9
 800229a:	414b      	adcs	r3, r1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022aa:	4659      	mov	r1, fp
 80022ac:	00cb      	lsls	r3, r1, #3
 80022ae:	4651      	mov	r1, sl
 80022b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022b4:	4651      	mov	r1, sl
 80022b6:	00ca      	lsls	r2, r1, #3
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	4603      	mov	r3, r0
 80022be:	4642      	mov	r2, r8
 80022c0:	189b      	adds	r3, r3, r2
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80022c4:	464b      	mov	r3, r9
 80022c6:	460a      	mov	r2, r1
 80022c8:	eb42 0303 	adc.w	r3, r2, r3
 80022cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	663b      	str	r3, [r7, #96]	; 0x60
 80022d8:	667a      	str	r2, [r7, #100]	; 0x64
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022e6:	4649      	mov	r1, r9
 80022e8:	008b      	lsls	r3, r1, #2
 80022ea:	4641      	mov	r1, r8
 80022ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022f0:	4641      	mov	r1, r8
 80022f2:	008a      	lsls	r2, r1, #2
 80022f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022f8:	f7fd ff72 	bl	80001e0 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <UART_SetConfig+0x4e4>)
 8002302:	fba3 1302 	umull	r1, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2164      	movs	r1, #100	; 0x64
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	4a08      	ldr	r2, [pc, #32]	; (8002338 <UART_SetConfig+0x4e4>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 020f 	and.w	r2, r3, #15
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4422      	add	r2, r4
 8002328:	609a      	str	r2, [r3, #8]
}
 800232a:	bf00      	nop
 800232c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002330:	46bd      	mov	sp, r7
 8002332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002336:	bf00      	nop
 8002338:	51eb851f 	.word	0x51eb851f

0800233c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SysTick_Handler+0x1c>)
 8002342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002344:	f001 fcce 	bl	8003ce4 <xTaskGetSchedulerState>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800234e:	f002 fab3 	bl	80048b8 <xPortSysTickHandler>
  }
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <vApplicationGetIdleTaskMemory+0x2c>)
 800236c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <vApplicationGetIdleTaskMemory+0x30>)
 8002372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	601a      	str	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200000e0 	.word	0x200000e0
 800238c:	2000013c 	.word	0x2000013c

08002390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <vApplicationGetTimerTaskMemory+0x2c>)
 80023a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <vApplicationGetTimerTaskMemory+0x30>)
 80023a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	2000033c 	.word	0x2000033c
 80023c0:	20000398 	.word	0x20000398

080023c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0208 	add.w	r2, r3, #8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f103 0208 	add.w	r2, r3, #8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f103 0208 	add.w	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d103      	bne.n	8002486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e00c      	b.n	80024a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3308      	adds	r3, #8
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e002      	b.n	8002494 <vListInsert+0x2e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d2f6      	bcs.n	800248e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6852      	ldr	r2, [r2, #4]
 80024f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d103      	bne.n	800250c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1e5a      	subs	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002556:	f002 f91d 	bl	8004794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	441a      	add	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	3b01      	subs	r3, #1
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	441a      	add	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	; 0xff
 800259a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d114      	bne.n	80025d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01a      	beq.n	80025ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3310      	adds	r3, #16
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 f9d5 	bl	8003968 <xTaskRemoveFromEventList>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <xQueueGenericReset+0xcc>)
 80025c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	e009      	b.n	80025ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3310      	adds	r3, #16
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fef2 	bl	80023c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff feed 	bl	80023c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ea:	f002 f903 	bl	80047f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <xQueueGenericCreateStatic+0x52>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <xQueueGenericCreateStatic+0x56>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <xQueueGenericCreateStatic+0x58>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	623b      	str	r3, [r7, #32]
}
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <xQueueGenericCreateStatic+0x7e>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <xQueueGenericCreateStatic+0x82>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <xQueueGenericCreateStatic+0x84>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	61fb      	str	r3, [r7, #28]
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800269a:	2350      	movs	r3, #80	; 0x50
 800269c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d00a      	beq.n	80026ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61bb      	str	r3, [r7, #24]
}
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f805 	bl	80026ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3730      	adds	r7, #48	; 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e002      	b.n	800270e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800271a:	2101      	movs	r1, #1
 800271c:	69b8      	ldr	r0, [r7, #24]
 800271e:	f7ff ff05 	bl	800252c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericSend+0x32>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <xQueueGenericSend+0x40>
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <xQueueGenericSend+0x44>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <xQueueGenericSend+0x46>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <xQueueGenericSend+0x60>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002790:	bf00      	nop
 8002792:	e7fe      	b.n	8002792 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d103      	bne.n	80027a2 <xQueueGenericSend+0x6e>
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <xQueueGenericSend+0x72>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <xQueueGenericSend+0x74>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	623b      	str	r3, [r7, #32]
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c2:	f001 fa8f 	bl	8003ce4 <xTaskGetSchedulerState>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <xQueueGenericSend+0x9e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xQueueGenericSend+0xa2>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueGenericSend+0xa4>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	61fb      	str	r3, [r7, #28]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027f2:	f001 ffcf 	bl	8004794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <xQueueGenericSend+0xd4>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d129      	bne.n	800285c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280e:	f000 fa0b 	bl	8002c28 <prvCopyDataToQueue>
 8002812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	3324      	adds	r3, #36	; 0x24
 8002820:	4618      	mov	r0, r3
 8002822:	f001 f8a1 	bl	8003968 <xTaskRemoveFromEventList>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800282c:	4b3f      	ldr	r3, [pc, #252]	; (800292c <xQueueGenericSend+0x1f8>)
 800282e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	e00a      	b.n	8002854 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <xQueueGenericSend+0x1f8>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002854:	f001 ffce 	bl	80047f4 <vPortExitCritical>
				return pdPASS;
 8002858:	2301      	movs	r3, #1
 800285a:	e063      	b.n	8002924 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002862:	f001 ffc7 	bl	80047f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002866:	2300      	movs	r3, #0
 8002868:	e05c      	b.n	8002924 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800286a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4618      	mov	r0, r3
 8002876:	f001 f8db 	bl	8003a30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800287a:	2301      	movs	r3, #1
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800287e:	f001 ffb9 	bl	80047f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002882:	f000 fe4d 	bl	8003520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002886:	f001 ff85 	bl	8004794 <vPortEnterCritical>
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002890:	b25b      	sxtb	r3, r3
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d103      	bne.n	80028a0 <xQueueGenericSend+0x16c>
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d103      	bne.n	80028b6 <xQueueGenericSend+0x182>
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b6:	f001 ff9d 	bl	80047f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ba:	1d3a      	adds	r2, r7, #4
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 f8ca 	bl	8003a5c <xTaskCheckForTimeOut>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d124      	bne.n	8002918 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d0:	f000 faa2 	bl	8002e18 <prvIsQueueFull>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	3310      	adds	r3, #16
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fff0 	bl	80038c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ea:	f000 fa2d 	bl	8002d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028ee:	f000 fe25 	bl	800353c <xTaskResumeAll>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f af7c 	bne.w	80027f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <xQueueGenericSend+0x1f8>)
 80028fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	e772      	b.n	80027f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800290c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290e:	f000 fa1b 	bl	8002d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002912:	f000 fe13 	bl	800353c <xTaskResumeAll>
 8002916:	e76c      	b.n	80027f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800291a:	f000 fa15 	bl	8002d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800291e:	f000 fe0d 	bl	800353c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002924:	4618      	mov	r0, r3
 8002926:	3738      	adds	r7, #56	; 0x38
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	e000ed04 	.word	0xe000ed04

08002930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <xQueueGenericSendFromISR+0x3c>
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <xQueueGenericSendFromISR+0x40>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <xQueueGenericSendFromISR+0x42>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002988:	bf00      	nop
 800298a:	e7fe      	b.n	800298a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d103      	bne.n	800299a <xQueueGenericSendFromISR+0x6a>
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <xQueueGenericSendFromISR+0x6e>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xQueueGenericSendFromISR+0x70>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	623b      	str	r3, [r7, #32]
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029ba:	f001 ffcd 	bl	8004958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029be:	f3ef 8211 	mrs	r2, BASEPRI
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	61fa      	str	r2, [r7, #28]
 80029d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <xQueueGenericSendFromISR+0xbc>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d12f      	bne.n	8002a4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a02:	f000 f911 	bl	8002c28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d112      	bne.n	8002a36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 ffa3 	bl	8003968 <xTaskRemoveFromEventList>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e007      	b.n	8002a46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	b25a      	sxtb	r2, r3
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a46:	2301      	movs	r3, #1
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002a4a:	e001      	b.n	8002a50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3740      	adds	r7, #64	; 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <xQueueReceive+0x30>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	623b      	str	r3, [r7, #32]
}
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <xQueueReceive+0x3e>
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <xQueueReceive+0x42>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <xQueueReceive+0x44>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueReceive+0x5e>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	61fb      	str	r3, [r7, #28]
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac6:	f001 f90d 	bl	8003ce4 <xTaskGetSchedulerState>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <xQueueReceive+0x6e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueReceive+0x72>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueReceive+0x74>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueReceive+0x8e>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61bb      	str	r3, [r7, #24]
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af6:	f001 fe4d 	bl	8004794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01f      	beq.n	8002b46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b0a:	f000 f8f7 	bl	8002cfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	3310      	adds	r3, #16
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ff20 	bl	8003968 <xTaskRemoveFromEventList>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <xQueueReceive+0x1bc>)
 8002b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b3e:	f001 fe59 	bl	80047f4 <vPortExitCritical>
				return pdPASS;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e069      	b.n	8002c1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b4c:	f001 fe52 	bl	80047f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e062      	b.n	8002c1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 ff66 	bl	8003a30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b68:	f001 fe44 	bl	80047f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b6c:	f000 fcd8 	bl	8003520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b70:	f001 fe10 	bl	8004794 <vPortEnterCritical>
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d103      	bne.n	8002b8a <xQueueReceive+0x122>
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <xQueueReceive+0x138>
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba0:	f001 fe28 	bl	80047f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ba4:	1d3a      	adds	r2, r7, #4
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 ff55 	bl	8003a5c <xTaskCheckForTimeOut>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d123      	bne.n	8002c00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bba:	f000 f917 	bl	8002dec <prvIsQueueEmpty>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fe7b 	bl	80038c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd4:	f000 f8b8 	bl	8002d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bd8:	f000 fcb0 	bl	800353c <xTaskResumeAll>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d189      	bne.n	8002af6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <xQueueReceive+0x1bc>)
 8002be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	e780      	b.n	8002af6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf6:	f000 f8a7 	bl	8002d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bfa:	f000 fc9f 	bl	800353c <xTaskResumeAll>
 8002bfe:	e77a      	b.n	8002af6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c02:	f000 f8a1 	bl	8002d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c06:	f000 fc99 	bl	800353c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0c:	f000 f8ee 	bl	8002dec <prvIsQueueEmpty>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f43f af6f 	beq.w	8002af6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d14d      	bne.n	8002cea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f864 	bl	8003d20 <xTaskPriorityDisinherit>
 8002c58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e043      	b.n	8002cea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d119      	bne.n	8002c9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6858      	ldr	r0, [r3, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	461a      	mov	r2, r3
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	f002 f8be 	bl	8004df4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	441a      	add	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d32b      	bcc.n	8002cea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e026      	b.n	8002cea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68d8      	ldr	r0, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	f002 f8a4 	bl	8004df4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d105      	bne.n	8002cea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d018      	beq.n	8002d40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d303      	bcc.n	8002d30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6838      	ldr	r0, [r7, #0]
 8002d3c:	f002 f85a 	bl	8004df4 <memcpy>
	}
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d50:	f001 fd20 	bl	8004794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d5c:	e011      	b.n	8002d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3324      	adds	r3, #36	; 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fdfc 	bl	8003968 <xTaskRemoveFromEventList>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d76:	f000 fed3 	bl	8003b20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dce9      	bgt.n	8002d5e <prvUnlockQueue+0x16>
 8002d8a:	e000      	b.n	8002d8e <prvUnlockQueue+0x46>
					break;
 8002d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	22ff      	movs	r2, #255	; 0xff
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d96:	f001 fd2d 	bl	80047f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d9a:	f001 fcfb 	bl	8004794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da6:	e011      	b.n	8002dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3310      	adds	r3, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fdd7 	bl	8003968 <xTaskRemoveFromEventList>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dc0:	f000 feae 	bl	8003b20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	dce9      	bgt.n	8002da8 <prvUnlockQueue+0x60>
 8002dd4:	e000      	b.n	8002dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002de0:	f001 fd08 	bl	80047f4 <vPortExitCritical>
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002df4:	f001 fcce 	bl	8004794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e001      	b.n	8002e0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e0a:	f001 fcf3 	bl	80047f4 <vPortExitCritical>

	return xReturn;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e20:	f001 fcb8 	bl	8004794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d102      	bne.n	8002e36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e3a:	f001 fcdb 	bl	80047f4 <vPortExitCritical>

	return xReturn;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e014      	b.n	8002e82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <vQueueAddToRegistry+0x50>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <vQueueAddToRegistry+0x50>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <vQueueAddToRegistry+0x50>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e7a:	e006      	b.n	8002e8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b07      	cmp	r3, #7
 8002e86:	d9e7      	bls.n	8002e58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000798 	.word	0x20000798

08002e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002eac:	f001 fc72 	bl	8004794 <vPortEnterCritical>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d103      	bne.n	8002ec6 <vQueueWaitForMessageRestricted+0x2a>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d103      	bne.n	8002edc <vQueueWaitForMessageRestricted+0x40>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002edc:	f001 fc8a 	bl	80047f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3324      	adds	r3, #36	; 0x24
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fd0d 	bl	8003910 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff26 	bl	8002d48 <prvUnlockQueue>
	}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	; 0x38
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	623b      	str	r3, [r7, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xTaskCreateStatic+0x46>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	61fb      	str	r3, [r7, #28]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f4a:	235c      	movs	r3, #92	; 0x5c
 8002f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b5c      	cmp	r3, #92	; 0x5c
 8002f52:	d00a      	beq.n	8002f6a <xTaskCreateStatic+0x66>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61bb      	str	r3, [r7, #24]
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01e      	beq.n	8002fb0 <xTaskCreateStatic+0xac>
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9302      	str	r3, [sp, #8]
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f850 	bl	8003048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002faa:	f000 f8dd 	bl	8003168 <prvAddNewTaskToReadyList>
 8002fae:	e001      	b.n	8002fb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fb4:	697b      	ldr	r3, [r7, #20]
	}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08c      	sub	sp, #48	; 0x30
 8002fc2:	af04      	add	r7, sp, #16
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fd00 	bl	80049d8 <pvPortMalloc>
 8002fd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fe0:	205c      	movs	r0, #92	; 0x5c
 8002fe2:	f001 fcf9 	bl	80049d8 <pvPortMalloc>
 8002fe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff4:	e005      	b.n	8003002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f001 fdba 	bl	8004b70 <vPortFree>
 8002ffc:	e001      	b.n	8003002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d017      	beq.n	8003038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	2300      	movs	r3, #0
 8003014:	9303      	str	r3, [sp, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f80e 	bl	8003048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800302c:	69f8      	ldr	r0, [r7, #28]
 800302e:	f000 f89b 	bl	8003168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003032:	2301      	movs	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e002      	b.n	800303e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800303e:	69bb      	ldr	r3, [r7, #24]
	}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	21a5      	movs	r1, #165	; 0xa5
 8003062:	f001 fed5 	bl	8004e10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003070:	3b01      	subs	r3, #1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f023 0307 	bic.w	r3, r3, #7
 800307e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	617b      	str	r3, [r7, #20]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01f      	beq.n	80030e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e012      	b.n	80030d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	7819      	ldrb	r1, [r3, #0]
 80030b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	3334      	adds	r3, #52	; 0x34
 80030bc:	460a      	mov	r2, r1
 80030be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	3301      	adds	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d9e9      	bls.n	80030ac <prvInitialiseNewTask+0x64>
 80030d8:	e000      	b.n	80030dc <prvInitialiseNewTask+0x94>
			{
				break;
 80030da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e4:	e003      	b.n	80030ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	2b37      	cmp	r3, #55	; 0x37
 80030f2:	d901      	bls.n	80030f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f4:	2337      	movs	r3, #55	; 0x37
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	2200      	movs	r2, #0
 8003108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f978 	bl	8002404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	3318      	adds	r3, #24
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f973 	bl	8002404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	f001 f9fa 	bl	8004540 <pxPortInitialiseStack>
 800314c:	4602      	mov	r2, r0
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003170:	f001 fb10 	bl	8004794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <prvAddNewTaskToReadyList+0xc4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a2c      	ldr	r2, [pc, #176]	; (800322c <prvAddNewTaskToReadyList+0xc4>)
 800317c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800317e:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <prvAddNewTaskToReadyList+0xc4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d110      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003194:	f000 fce8 	bl	8003b68 <prvInitialiseTaskLists>
 8003198:	e00d      	b.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <prvAddNewTaskToReadyList+0xcc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d802      	bhi.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <prvAddNewTaskToReadyList+0xd0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <prvAddNewTaskToReadyList+0xd0>)
 80031be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <prvAddNewTaskToReadyList+0xd0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <prvAddNewTaskToReadyList+0xd4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d903      	bls.n	80031dc <prvAddNewTaskToReadyList+0x74>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <prvAddNewTaskToReadyList+0xd4>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <prvAddNewTaskToReadyList+0xd8>)
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7ff f913 	bl	800241e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031f8:	f001 fafc 	bl	80047f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <prvAddNewTaskToReadyList+0xcc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	429a      	cmp	r2, r3
 8003210:	d207      	bcs.n	8003222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <prvAddNewTaskToReadyList+0xdc>)
 8003214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000cac 	.word	0x20000cac
 8003230:	200007d8 	.word	0x200007d8
 8003234:	20000cb8 	.word	0x20000cb8
 8003238:	20000cc8 	.word	0x20000cc8
 800323c:	20000cb4 	.word	0x20000cb4
 8003240:	200007dc 	.word	0x200007dc
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003250:	f001 faa0 	bl	8004794 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <vTaskSuspend+0x18>
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <vTaskSuspend+0xd4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e000      	b.n	8003262 <vTaskSuspend+0x1a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3304      	adds	r3, #4
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f935 	bl	80024d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3318      	adds	r3, #24
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f92c 	bl	80024d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4826      	ldr	r0, [pc, #152]	; (8003320 <vTaskSuspend+0xd8>)
 8003288:	f7ff f8c9 	bl	800241e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d103      	bne.n	80032a0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80032a0:	f001 faa8 	bl	80047f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <vTaskSuspend+0xdc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80032ac:	f001 fa72 	bl	8004794 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80032b0:	f000 fcf8 	bl	8003ca4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80032b4:	f001 fa9e 	bl	80047f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <vTaskSuspend+0xd4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d127      	bne.n	8003312 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <vTaskSuspend+0xdc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <vTaskSuspend+0xe0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <vTaskSuspend+0xa0>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	60bb      	str	r3, [r7, #8]
}
 80032e4:	bf00      	nop
 80032e6:	e7fe      	b.n	80032e6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <vTaskSuspend+0xe4>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032f8:	e00b      	b.n	8003312 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <vTaskSuspend+0xd8>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <vTaskSuspend+0xe8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d103      	bne.n	800330e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <vTaskSuspend+0xd4>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
	}
 800330c:	e001      	b.n	8003312 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800330e:	f000 fa7d 	bl	800380c <vTaskSwitchContext>
	}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200007d8 	.word	0x200007d8
 8003320:	20000c98 	.word	0x20000c98
 8003324:	20000cb8 	.word	0x20000cb8
 8003328:	20000cd4 	.word	0x20000cd4
 800332c:	e000ed04 	.word	0xe000ed04
 8003330:	20000cac 	.word	0x20000cac

08003334 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60fb      	str	r3, [r7, #12]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <prvTaskIsTaskSuspended+0x5c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10a      	bne.n	8003380 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <prvTaskIsTaskSuspended+0x60>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d005      	beq.n	8003380 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003380:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003382:	4618      	mov	r0, r3
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000c98 	.word	0x20000c98
 8003394:	20000c6c 	.word	0x20000c6c

08003398 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <vTaskResume+0x28>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	60bb      	str	r3, [r7, #8]
}
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <vTaskResume+0xac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d038      	beq.n	800343c <vTaskResume+0xa4>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d035      	beq.n	800343c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80033d0:	f001 f9e0 	bl	8004794 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ffad 	bl	8003334 <prvTaskIsTaskSuspended>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02b      	beq.n	8003438 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f877 	bl	80024d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <vTaskResume+0xb0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d903      	bls.n	80033fe <vTaskResume+0x66>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <vTaskResume+0xb0>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <vTaskResume+0xb4>)
 800340c:	441a      	add	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3304      	adds	r3, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7ff f802 	bl	800241e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <vTaskResume+0xac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	429a      	cmp	r2, r3
 8003426:	d307      	bcc.n	8003438 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <vTaskResume+0xb8>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003438:	f001 f9dc 	bl	80047f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200007d8 	.word	0x200007d8
 8003448:	20000cb4 	.word	0x20000cb4
 800344c:	200007dc 	.word	0x200007dc
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003462:	463a      	mov	r2, r7
 8003464:	1d39      	adds	r1, r7, #4
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe ff76 	bl	800235c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	9202      	str	r2, [sp, #8]
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	460a      	mov	r2, r1
 8003482:	4921      	ldr	r1, [pc, #132]	; (8003508 <vTaskStartScheduler+0xb4>)
 8003484:	4821      	ldr	r0, [pc, #132]	; (800350c <vTaskStartScheduler+0xb8>)
 8003486:	f7ff fd3d 	bl	8002f04 <xTaskCreateStatic>
 800348a:	4603      	mov	r3, r0
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <vTaskStartScheduler+0xbc>)
 800348e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <vTaskStartScheduler+0xbc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e001      	b.n	80034a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034a8:	f000 fcfc 	bl	8003ea4 <xTimerCreateTimerTask>
 80034ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d116      	bne.n	80034e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
}
 80034c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <vTaskStartScheduler+0xc0>)
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295
 80034ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <vTaskStartScheduler+0xc4>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <vTaskStartScheduler+0xc8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034dc:	f001 f8b8 	bl	8004650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034e0:	e00e      	b.n	8003500 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d10a      	bne.n	8003500 <vTaskStartScheduler+0xac>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60fb      	str	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vTaskStartScheduler+0xaa>
}
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08004e78 	.word	0x08004e78
 800350c:	08003b39 	.word	0x08003b39
 8003510:	20000cd0 	.word	0x20000cd0
 8003514:	20000ccc 	.word	0x20000ccc
 8003518:	20000cb8 	.word	0x20000cb8
 800351c:	20000cb0 	.word	0x20000cb0

08003520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <vTaskSuspendAll+0x18>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <vTaskSuspendAll+0x18>)
 800352c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20000cd4 	.word	0x20000cd4

0800353c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <xTaskResumeAll+0x118>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskResumeAll+0x2c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	603b      	str	r3, [r7, #0]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003568:	f001 f914 	bl	8004794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <xTaskResumeAll+0x118>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	4a38      	ldr	r2, [pc, #224]	; (8003654 <xTaskResumeAll+0x118>)
 8003574:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003576:	4b37      	ldr	r3, [pc, #220]	; (8003654 <xTaskResumeAll+0x118>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d162      	bne.n	8003644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <xTaskResumeAll+0x11c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d05e      	beq.n	8003644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003586:	e02f      	b.n	80035e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003588:	4b34      	ldr	r3, [pc, #208]	; (800365c <xTaskResumeAll+0x120>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3318      	adds	r3, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff9f 	bl	80024d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe ff9a 	bl	80024d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <xTaskResumeAll+0x124>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d903      	bls.n	80035b8 <xTaskResumeAll+0x7c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <xTaskResumeAll+0x124>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4a27      	ldr	r2, [pc, #156]	; (8003664 <xTaskResumeAll+0x128>)
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7fe ff25 	bl	800241e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <xTaskResumeAll+0x12c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <xTaskResumeAll+0x130>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <xTaskResumeAll+0x120>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1cb      	bne.n	8003588 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035f6:	f000 fb55 	bl	8003ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <xTaskResumeAll+0x134>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003606:	f000 f847 	bl	8003698 <xTaskIncrementTick>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <xTaskResumeAll+0x130>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3b01      	subs	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f1      	bne.n	8003606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <xTaskResumeAll+0x134>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <xTaskResumeAll+0x130>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <xTaskResumeAll+0x138>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003644:	f001 f8d6 	bl	80047f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003648:	68bb      	ldr	r3, [r7, #8]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000cd4 	.word	0x20000cd4
 8003658:	20000cac 	.word	0x20000cac
 800365c:	20000c6c 	.word	0x20000c6c
 8003660:	20000cb4 	.word	0x20000cb4
 8003664:	200007dc 	.word	0x200007dc
 8003668:	200007d8 	.word	0x200007d8
 800366c:	20000cc0 	.word	0x20000cc0
 8003670:	20000cbc 	.word	0x20000cbc
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <xTaskGetTickCount+0x1c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003684:	687b      	ldr	r3, [r7, #4]
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000cb0 	.word	0x20000cb0

08003698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a2:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <xTaskIncrementTick+0x148>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 808f 	bne.w	80037ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036ac:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <xTaskIncrementTick+0x14c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036b4:	4a4b      	ldr	r2, [pc, #300]	; (80037e4 <xTaskIncrementTick+0x14c>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d120      	bne.n	8003702 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <xTaskIncrementTick+0x150>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	603b      	str	r3, [r7, #0]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xTaskIncrementTick+0x46>
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <xTaskIncrementTick+0x150>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <xTaskIncrementTick+0x154>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3f      	ldr	r2, [pc, #252]	; (80037e8 <xTaskIncrementTick+0x150>)
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <xTaskIncrementTick+0x154>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <xTaskIncrementTick+0x158>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	4a3d      	ldr	r2, [pc, #244]	; (80037f0 <xTaskIncrementTick+0x158>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	f000 fad1 	bl	8003ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <xTaskIncrementTick+0x15c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d349      	bcc.n	80037a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800370c:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <xTaskIncrementTick+0x150>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <xTaskIncrementTick+0x15c>)
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	601a      	str	r2, [r3, #0]
					break;
 800371e:	e03f      	b.n	80037a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <xTaskIncrementTick+0x150>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d203      	bcs.n	8003740 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003738:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <xTaskIncrementTick+0x15c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800373e:	e02f      	b.n	80037a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fec7 	bl	80024d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3318      	adds	r3, #24
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe febe 	bl	80024d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <xTaskIncrementTick+0x160>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d903      	bls.n	8003770 <xTaskIncrementTick+0xd8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <xTaskIncrementTick+0x160>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <xTaskIncrementTick+0x164>)
 800377e:	441a      	add	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fe fe49 	bl	800241e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <xTaskIncrementTick+0x168>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	429a      	cmp	r2, r3
 8003798:	d3b8      	bcc.n	800370c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379e:	e7b5      	b.n	800370c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <xTaskIncrementTick+0x168>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	4915      	ldr	r1, [pc, #84]	; (80037fc <xTaskIncrementTick+0x164>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d901      	bls.n	80037bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <xTaskIncrementTick+0x16c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e004      	b.n	80037d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <xTaskIncrementTick+0x170>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <xTaskIncrementTick+0x170>)
 80037d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000cd4 	.word	0x20000cd4
 80037e4:	20000cb0 	.word	0x20000cb0
 80037e8:	20000c64 	.word	0x20000c64
 80037ec:	20000c68 	.word	0x20000c68
 80037f0:	20000cc4 	.word	0x20000cc4
 80037f4:	20000ccc 	.word	0x20000ccc
 80037f8:	20000cb4 	.word	0x20000cb4
 80037fc:	200007dc 	.word	0x200007dc
 8003800:	200007d8 	.word	0x200007d8
 8003804:	20000cc0 	.word	0x20000cc0
 8003808:	20000cbc 	.word	0x20000cbc

0800380c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003812:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <vTaskSwitchContext+0xa8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <vTaskSwitchContext+0xac>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003820:	e041      	b.n	80038a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <vTaskSwitchContext+0xac>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003828:	4b24      	ldr	r3, [pc, #144]	; (80038bc <vTaskSwitchContext+0xb0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e010      	b.n	8003852 <vTaskSwitchContext+0x46>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <vTaskSwitchContext+0x40>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	607b      	str	r3, [r7, #4]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <vTaskSwitchContext+0x3e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	491b      	ldr	r1, [pc, #108]	; (80038c0 <vTaskSwitchContext+0xb4>)
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0e4      	beq.n	8003830 <vTaskSwitchContext+0x24>
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <vTaskSwitchContext+0xb4>)
 8003872:	4413      	add	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	3308      	adds	r3, #8
 8003888:	429a      	cmp	r2, r3
 800388a:	d104      	bne.n	8003896 <vTaskSwitchContext+0x8a>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <vTaskSwitchContext+0xb8>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4a06      	ldr	r2, [pc, #24]	; (80038bc <vTaskSwitchContext+0xb0>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000cd4 	.word	0x20000cd4
 80038b8:	20000cc0 	.word	0x20000cc0
 80038bc:	20000cb4 	.word	0x20000cb4
 80038c0:	200007dc 	.word	0x200007dc
 80038c4:	200007d8 	.word	0x200007d8

080038c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <vTaskPlaceOnEventList+0x44>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fe fdb5 	bl	8002466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038fc:	2101      	movs	r1, #1
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f000 fa7c 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	200007d8 	.word	0x200007d8

08003910 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	617b      	str	r3, [r7, #20]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <vTaskPlaceOnEventListRestricted+0x54>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3318      	adds	r3, #24
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7fe fd6c 	bl	800241e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	68b8      	ldr	r0, [r7, #8]
 8003956:	f000 fa51 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
	}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200007d8 	.word	0x200007d8

08003968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60fb      	str	r3, [r7, #12]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	3318      	adds	r3, #24
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fd9d 	bl	80024d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <xTaskRemoveFromEventList+0xb0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11d      	bne.n	80039e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fd94 	bl	80024d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <xTaskRemoveFromEventList+0xb4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskRemoveFromEventList+0x5c>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <xTaskRemoveFromEventList+0xb4>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <xTaskRemoveFromEventList+0xb8>)
 80039d2:	441a      	add	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe fd1f 	bl	800241e <vListInsertEnd>
 80039e0:	e005      	b.n	80039ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3318      	adds	r3, #24
 80039e6:	4619      	mov	r1, r3
 80039e8:	480e      	ldr	r0, [pc, #56]	; (8003a24 <xTaskRemoveFromEventList+0xbc>)
 80039ea:	f7fe fd18 	bl	800241e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <xTaskRemoveFromEventList+0xc0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d905      	bls.n	8003a08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <xTaskRemoveFromEventList+0xc4>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e001      	b.n	8003a0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a0c:	697b      	ldr	r3, [r7, #20]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000cd4 	.word	0x20000cd4
 8003a1c:	20000cb4 	.word	0x20000cb4
 8003a20:	200007dc 	.word	0x200007dc
 8003a24:	20000c6c 	.word	0x20000c6c
 8003a28:	200007d8 	.word	0x200007d8
 8003a2c:	20000cc0 	.word	0x20000cc0

08003a30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <vTaskInternalSetTimeOutState+0x24>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <vTaskInternalSetTimeOutState+0x28>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	20000cc4 	.word	0x20000cc4
 8003a58:	20000cb0 	.word	0x20000cb0

08003a5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	613b      	str	r3, [r7, #16]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a9e:	f000 fe79 	bl	8004794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <xTaskCheckForTimeOut+0xbc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d102      	bne.n	8003ac2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e023      	b.n	8003b0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <xTaskCheckForTimeOut+0xc0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d007      	beq.n	8003ade <xTaskCheckForTimeOut+0x82>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e015      	b.n	8003b0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d20b      	bcs.n	8003b00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff9b 	bl	8003a30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e004      	b.n	8003b0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b0a:	f000 fe73 	bl	80047f4 <vPortExitCritical>

	return xReturn;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000cb0 	.word	0x20000cb0
 8003b1c:	20000cc4 	.word	0x20000cc4

08003b20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <vTaskMissedYield+0x14>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000cc0 	.word	0x20000cc0

08003b38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b40:	f000 f852 	bl	8003be8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <prvIdleTask+0x28>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d9f9      	bls.n	8003b40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <prvIdleTask+0x2c>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b5c:	e7f0      	b.n	8003b40 <prvIdleTask+0x8>
 8003b5e:	bf00      	nop
 8003b60:	200007dc 	.word	0x200007dc
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	e00c      	b.n	8003b8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <prvInitialiseTaskLists+0x60>)
 8003b80:	4413      	add	r3, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fc1e 	bl	80023c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b37      	cmp	r3, #55	; 0x37
 8003b92:	d9ef      	bls.n	8003b74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b94:	480d      	ldr	r0, [pc, #52]	; (8003bcc <prvInitialiseTaskLists+0x64>)
 8003b96:	f7fe fc15 	bl	80023c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b9a:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <prvInitialiseTaskLists+0x68>)
 8003b9c:	f7fe fc12 	bl	80023c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ba0:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <prvInitialiseTaskLists+0x6c>)
 8003ba2:	f7fe fc0f 	bl	80023c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ba6:	480c      	ldr	r0, [pc, #48]	; (8003bd8 <prvInitialiseTaskLists+0x70>)
 8003ba8:	f7fe fc0c 	bl	80023c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <prvInitialiseTaskLists+0x74>)
 8003bae:	f7fe fc09 	bl	80023c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <prvInitialiseTaskLists+0x78>)
 8003bb4:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <prvInitialiseTaskLists+0x64>)
 8003bb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <prvInitialiseTaskLists+0x7c>)
 8003bba:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <prvInitialiseTaskLists+0x68>)
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200007dc 	.word	0x200007dc
 8003bcc:	20000c3c 	.word	0x20000c3c
 8003bd0:	20000c50 	.word	0x20000c50
 8003bd4:	20000c6c 	.word	0x20000c6c
 8003bd8:	20000c80 	.word	0x20000c80
 8003bdc:	20000c98 	.word	0x20000c98
 8003be0:	20000c64 	.word	0x20000c64
 8003be4:	20000c68 	.word	0x20000c68

08003be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bee:	e019      	b.n	8003c24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bf0:	f000 fdd0 	bl	8004794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <prvCheckTasksWaitingTermination+0x50>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fc69 	bl	80024d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <prvCheckTasksWaitingTermination+0x54>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <prvCheckTasksWaitingTermination+0x54>)
 8003c0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <prvCheckTasksWaitingTermination+0x58>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <prvCheckTasksWaitingTermination+0x58>)
 8003c18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c1a:	f000 fdeb 	bl	80047f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f810 	bl	8003c44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <prvCheckTasksWaitingTermination+0x58>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e1      	bne.n	8003bf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000c80 	.word	0x20000c80
 8003c3c:	20000cac 	.word	0x20000cac
 8003c40:	20000c94 	.word	0x20000c94

08003c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ff88 	bl	8004b70 <vPortFree>
				vPortFree( pxTCB );
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 ff85 	bl	8004b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c66:	e018      	b.n	8003c9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d103      	bne.n	8003c7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 ff7c 	bl	8004b70 <vPortFree>
	}
 8003c78:	e00f      	b.n	8003c9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d00a      	beq.n	8003c9a <prvDeleteTCB+0x56>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <prvDeleteTCB+0x54>
	}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <prvResetNextTaskUnblockTime+0x38>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cbc:	e008      	b.n	8003cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <prvResetNextTaskUnblockTime+0x38>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	20000c64 	.word	0x20000c64
 8003ce0:	20000ccc 	.word	0x20000ccc

08003ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <xTaskGetSchedulerState+0x34>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	e008      	b.n	8003d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <xTaskGetSchedulerState+0x38>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d00:	2302      	movs	r3, #2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	e001      	b.n	8003d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d0a:	687b      	ldr	r3, [r7, #4]
	}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20000cb8 	.word	0x20000cb8
 8003d1c:	20000cd4 	.word	0x20000cd4

08003d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d056      	beq.n	8003de4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <xTaskPriorityDisinherit+0xd0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d00a      	beq.n	8003d56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60bb      	str	r3, [r7, #8]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d02c      	beq.n	8003de4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d128      	bne.n	8003de4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fb9e 	bl	80024d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <xTaskPriorityDisinherit+0xd4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d903      	bls.n	8003dc4 <xTaskPriorityDisinherit+0xa4>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <xTaskPriorityDisinherit+0xd4>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <xTaskPriorityDisinherit+0xd8>)
 8003dd2:	441a      	add	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f7fe fb1f 	bl	800241e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003de4:	697b      	ldr	r3, [r7, #20]
	}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200007d8 	.word	0x200007d8
 8003df4:	20000cb4 	.word	0x20000cb4
 8003df8:	200007dc 	.word	0x200007dc

08003dfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0c:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fb60 	bl	80024d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d10a      	bne.n	8003e36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4819      	ldr	r0, [pc, #100]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e30:	f7fe faf5 	bl	800241e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e34:	e026      	b.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d209      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe fb03 	bl	8002466 <vListInsert>
}
 8003e60:	e010      	b.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f7fe faf9 	bl	8002466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d202      	bcs.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e7e:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000cb0 	.word	0x20000cb0
 8003e90:	200007d8 	.word	0x200007d8
 8003e94:	20000c98 	.word	0x20000c98
 8003e98:	20000c68 	.word	0x20000c68
 8003e9c:	20000c64 	.word	0x20000c64
 8003ea0:	20000ccc 	.word	0x20000ccc

08003ea4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eae:	f000 fb07 	bl	80044c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xTimerCreateTimerTask+0x80>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d021      	beq.n	8003efe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	f107 0108 	add.w	r1, r7, #8
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fa5f 	bl	8002390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	9202      	str	r2, [sp, #8]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2302      	movs	r3, #2
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	4910      	ldr	r1, [pc, #64]	; (8003f28 <xTimerCreateTimerTask+0x84>)
 8003ee6:	4811      	ldr	r0, [pc, #68]	; (8003f2c <xTimerCreateTimerTask+0x88>)
 8003ee8:	f7ff f80c 	bl	8002f04 <xTaskCreateStatic>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <xTimerCreateTimerTask+0x8c>)
 8003ef0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <xTimerCreateTimerTask+0x8c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003efa:	2301      	movs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f1a:	697b      	ldr	r3, [r7, #20]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000d08 	.word	0x20000d08
 8003f28:	08004e80 	.word	0x08004e80
 8003f2c:	08004069 	.word	0x08004069
 8003f30:	20000d0c 	.word	0x20000d0c

08003f34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	623b      	str	r3, [r7, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02a      	beq.n	8003fc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	dc18      	bgt.n	8003fae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f7c:	f7ff feb2 	bl	8003ce4 <xTaskGetSchedulerState>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d109      	bne.n	8003f9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f107 0110 	add.w	r1, r7, #16
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	f7fe fbcf 	bl	8002734 <xQueueGenericSend>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24
 8003f98:	e012      	b.n	8003fc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f107 0110 	add.w	r1, r7, #16
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f7fe fbc5 	bl	8002734 <xQueueGenericSend>
 8003faa:	6278      	str	r0, [r7, #36]	; 0x24
 8003fac:	e008      	b.n	8003fc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <xTimerGenericCommand+0x98>)
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f107 0110 	add.w	r1, r7, #16
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f7fe fcb9 	bl	8002930 <xQueueGenericSendFromISR>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000d08 	.word	0x20000d08

08003fd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <prvProcessExpiredTimer+0x94>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fa75 	bl	80024d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	18d1      	adds	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f000 f8d1 	bl	80041b0 <prvInsertTimerInActiveList>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01f      	beq.n	8004054 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	2100      	movs	r1, #0
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7ff ff88 	bl	8003f34 <xTimerGenericCommand>
 8004024:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	4798      	blx	r3
}
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000d00 	.word	0x20000d00

08004068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004070:	f107 0308 	add.w	r3, r7, #8
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f857 	bl	8004128 <prvGetNextExpireTime>
 800407a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4619      	mov	r1, r3
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f803 	bl	800408c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004086:	f000 f8d5 	bl	8004234 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800408a:	e7f1      	b.n	8004070 <prvTimerTask+0x8>

0800408c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004096:	f7ff fa43 	bl	8003520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800409a:	f107 0308 	add.w	r3, r7, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f866 	bl	8004170 <prvSampleTimeNow>
 80040a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d130      	bne.n	800410e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <prvProcessTimerOrBlockTask+0x3c>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d806      	bhi.n	80040c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040ba:	f7ff fa3f 	bl	800353c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff85 	bl	8003fd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040c6:	e024      	b.n	8004112 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <prvProcessTimerOrBlockTask+0x90>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <prvProcessTimerOrBlockTask+0x50>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <prvProcessTimerOrBlockTask+0x52>
 80040dc:	2300      	movs	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <prvProcessTimerOrBlockTask+0x94>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7fe fed5 	bl	8002e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040f2:	f7ff fa23 	bl	800353c <xTaskResumeAll>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvProcessTimerOrBlockTask+0x98>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
}
 800410c:	e001      	b.n	8004112 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800410e:	f7ff fa15 	bl	800353c <xTaskResumeAll>
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000d04 	.word	0x20000d04
 8004120:	20000d08 	.word	0x20000d08
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <prvGetNextExpireTime+0x44>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <prvGetNextExpireTime+0x16>
 800413a:	2201      	movs	r2, #1
 800413c:	e000      	b.n	8004140 <prvGetNextExpireTime+0x18>
 800413e:	2200      	movs	r2, #0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <prvGetNextExpireTime+0x44>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e001      	b.n	800415c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000d00 	.word	0x20000d00

08004170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004178:	f7ff fa7e 	bl	8003678 <xTaskGetTickCount>
 800417c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <prvSampleTimeNow+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d205      	bcs.n	8004194 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004188:	f000 f936 	bl	80043f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e002      	b.n	800419a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800419a:	4a04      	ldr	r2, [pc, #16]	; (80041ac <prvSampleTimeNow+0x3c>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041a0:	68fb      	ldr	r3, [r7, #12]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000d10 	.word	0x20000d10

080041b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d812      	bhi.n	80041fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e01b      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <prvInsertTimerInActiveList+0x7c>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe f936 	bl	8002466 <vListInsert>
 80041fa:	e012      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d206      	bcs.n	8004212 <prvInsertTimerInActiveList+0x62>
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e007      	b.n	8004222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <prvInsertTimerInActiveList+0x80>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fe f922 	bl	8002466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004222:	697b      	ldr	r3, [r7, #20]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000d04 	.word	0x20000d04
 8004230:	20000d00 	.word	0x20000d00

08004234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08e      	sub	sp, #56	; 0x38
 8004238:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423a:	e0ca      	b.n	80043d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da18      	bge.n	8004274 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	3304      	adds	r3, #4
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	61fb      	str	r3, [r7, #28]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426a:	6850      	ldr	r0, [r2, #4]
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	6892      	ldr	r2, [r2, #8]
 8004270:	4611      	mov	r1, r2
 8004272:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f2c0 80aa 	blt.w	80043d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe f923 	bl	80024d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004292:	463b      	mov	r3, r7
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff6b 	bl	8004170 <prvSampleTimeNow>
 800429a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b09      	cmp	r3, #9
 80042a0:	f200 8097 	bhi.w	80043d2 <prvProcessReceivedCommands+0x19e>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <prvProcessReceivedCommands+0x78>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	08004349 	.word	0x08004349
 80042bc:	0800435d 	.word	0x0800435d
 80042c0:	080043a7 	.word	0x080043a7
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042d5 	.word	0x080042d5
 80042cc:	08004349 	.word	0x08004349
 80042d0:	0800435d 	.word	0x0800435d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	18d1      	adds	r1, r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f4:	f7ff ff5c 	bl	80041b0 <prvInsertTimerInActiveList>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d069      	beq.n	80043d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004304:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05e      	beq.n	80043d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	441a      	add	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	2100      	movs	r1, #0
 8004324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004326:	f7ff fe05 	bl	8003f34 <xTimerGenericCommand>
 800432a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d14f      	bne.n	80043d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61bb      	str	r3, [r7, #24]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800435a:	e03a      	b.n	80043d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	617b      	str	r3, [r7, #20]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	18d1      	adds	r1, r2, r3
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a0:	f7ff ff06 	bl	80041b0 <prvInsertTimerInActiveList>
					break;
 80043a4:	e015      	b.n	80043d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d103      	bne.n	80043bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b6:	f000 fbdb 	bl	8004b70 <vPortFree>
 80043ba:	e00a      	b.n	80043d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043ce:	e000      	b.n	80043d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <prvProcessReceivedCommands+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1d39      	adds	r1, r7, #4
 80043d8:	2200      	movs	r2, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fb44 	bl	8002a68 <xQueueReceive>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f47f af2a 	bne.w	800423c <prvProcessReceivedCommands+0x8>
	}
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3730      	adds	r7, #48	; 0x30
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000d08 	.word	0x20000d08

080043f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043fe:	e048      	b.n	8004492 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440a:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f85d 	bl	80024d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02e      	beq.n	8004492 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90e      	bls.n	8004464 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7fe f802 	bl	8002466 <vListInsert>
 8004462:	e016      	b.n	8004492 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2300      	movs	r3, #0
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	2100      	movs	r1, #0
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff fd60 	bl	8003f34 <xTimerGenericCommand>
 8004474:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	603b      	str	r3, [r7, #0]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1b1      	bne.n	8004400 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <prvSwitchTimerLists+0xc4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <prvSwitchTimerLists+0xc0>)
 80044a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvSwitchTimerLists+0xc4>)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000d00 	.word	0x20000d00
 80044bc:	20000d04 	.word	0x20000d04

080044c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044c6:	f000 f965 	bl	8004794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <prvCheckForValidListAndQueue+0x60>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d120      	bne.n	8004514 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044d2:	4814      	ldr	r0, [pc, #80]	; (8004524 <prvCheckForValidListAndQueue+0x64>)
 80044d4:	f7fd ff76 	bl	80023c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044d8:	4813      	ldr	r0, [pc, #76]	; (8004528 <prvCheckForValidListAndQueue+0x68>)
 80044da:	f7fd ff73 	bl	80023c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <prvCheckForValidListAndQueue+0x6c>)
 80044e0:	4a10      	ldr	r2, [pc, #64]	; (8004524 <prvCheckForValidListAndQueue+0x64>)
 80044e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <prvCheckForValidListAndQueue+0x70>)
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <prvCheckForValidListAndQueue+0x68>)
 80044e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <prvCheckForValidListAndQueue+0x74>)
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <prvCheckForValidListAndQueue+0x78>)
 80044f2:	2110      	movs	r1, #16
 80044f4:	200a      	movs	r0, #10
 80044f6:	f7fe f881 	bl	80025fc <xQueueGenericCreateStatic>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <prvCheckForValidListAndQueue+0x60>)
 80044fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <prvCheckForValidListAndQueue+0x60>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <prvCheckForValidListAndQueue+0x60>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	490b      	ldr	r1, [pc, #44]	; (800453c <prvCheckForValidListAndQueue+0x7c>)
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fc9a 	bl	8002e48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004514:	f000 f96e 	bl	80047f4 <vPortExitCritical>
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000d08 	.word	0x20000d08
 8004524:	20000cd8 	.word	0x20000cd8
 8004528:	20000cec 	.word	0x20000cec
 800452c:	20000d00 	.word	0x20000d00
 8004530:	20000d04 	.word	0x20000d04
 8004534:	20000db4 	.word	0x20000db4
 8004538:	20000d14 	.word	0x20000d14
 800453c:	08004e88 	.word	0x08004e88

08004540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3b04      	subs	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b04      	subs	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004570:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <pxPortInitialiseStack+0x64>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3b14      	subs	r3, #20
 800457a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f06f 0202 	mvn.w	r2, #2
 800458e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3b20      	subs	r3, #32
 8004594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004596:	68fb      	ldr	r3, [r7, #12]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	080045a9 	.word	0x080045a9

080045a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <prvTaskExitError+0x54>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d00a      	beq.n	80045d2 <prvTaskExitError+0x2a>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <prvTaskExitError+0x28>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	60bb      	str	r3, [r7, #8]
}
 80045e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045e6:	bf00      	nop
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0fc      	beq.n	80045e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	2000000c 	.word	0x2000000c

08004600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <pxCurrentTCBConst2>)
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	6808      	ldr	r0, [r1, #0]
 8004606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	f380 8809 	msr	PSP, r0
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8811 	msr	BASEPRI, r0
 800461a:	4770      	bx	lr
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst2>:
 8004620:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <prvPortStartFirstTask+0x24>)
 800462a:	6800      	ldr	r0, [r0, #0]
 800462c:	6800      	ldr	r0, [r0, #0]
 800462e:	f380 8808 	msr	MSP, r0
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8814 	msr	CONTROL, r0
 800463a:	b662      	cpsie	i
 800463c:	b661      	cpsie	f
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	df00      	svc	0
 8004648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800464a:	bf00      	nop
 800464c:	e000ed08 	.word	0xe000ed08

08004650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004656:	4b46      	ldr	r3, [pc, #280]	; (8004770 <xPortStartScheduler+0x120>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a46      	ldr	r2, [pc, #280]	; (8004774 <xPortStartScheduler+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10a      	bne.n	8004676 <xPortStartScheduler+0x26>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	613b      	str	r3, [r7, #16]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <xPortStartScheduler+0x120>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <xPortStartScheduler+0x128>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10a      	bne.n	8004696 <xPortStartScheduler+0x46>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004696:	4b39      	ldr	r3, [pc, #228]	; (800477c <xPortStartScheduler+0x12c>)
 8004698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <xPortStartScheduler+0x130>)
 80046bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <xPortStartScheduler+0x134>)
 80046c0:	2207      	movs	r2, #7
 80046c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046c4:	e009      	b.n	80046da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <xPortStartScheduler+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <xPortStartScheduler+0x134>)
 80046ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d0ef      	beq.n	80046c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <xPortStartScheduler+0x134>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1c3 0307 	rsb	r3, r3, #7
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00a      	beq.n	8004708 <xPortStartScheduler+0xb8>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60bb      	str	r3, [r7, #8]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004708:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <xPortStartScheduler+0x134>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <xPortStartScheduler+0x134>)
 8004710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <xPortStartScheduler+0x134>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800471a:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <xPortStartScheduler+0x134>)
 800471c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004726:	4b18      	ldr	r3, [pc, #96]	; (8004788 <xPortStartScheduler+0x138>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <xPortStartScheduler+0x138>)
 800472c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <xPortStartScheduler+0x138>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <xPortStartScheduler+0x138>)
 8004738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800473c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800473e:	f000 f8dd 	bl	80048fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <xPortStartScheduler+0x13c>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004748:	f000 f8fc 	bl	8004944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <xPortStartScheduler+0x140>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <xPortStartScheduler+0x140>)
 8004752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004758:	f7ff ff66 	bl	8004628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800475c:	f7ff f856 	bl	800380c <vTaskSwitchContext>
	prvTaskExitError();
 8004760:	f7ff ff22 	bl	80045a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	e000ed00 	.word	0xe000ed00
 8004774:	410fc271 	.word	0x410fc271
 8004778:	410fc270 	.word	0x410fc270
 800477c:	e000e400 	.word	0xe000e400
 8004780:	20000e04 	.word	0x20000e04
 8004784:	20000e08 	.word	0x20000e08
 8004788:	e000ed20 	.word	0xe000ed20
 800478c:	2000000c 	.word	0x2000000c
 8004790:	e000ef34 	.word	0xe000ef34

08004794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	607b      	str	r3, [r7, #4]
}
 80047ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <vPortEnterCritical+0x58>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <vPortEnterCritical+0x58>)
 80047b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047b8:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <vPortEnterCritical+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10f      	bne.n	80047e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <vPortEnterCritical+0x5c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	603b      	str	r3, [r7, #0]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <vPortEnterCritical+0x4a>
	}
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <vPortExitCritical+0x50>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <vPortExitCritical+0x24>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	607b      	str	r3, [r7, #4]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortExitCritical+0x50>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <vPortExitCritical+0x50>)
 8004820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <vPortExitCritical+0x50>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <vPortExitCritical+0x42>
 800482a:	2300      	movs	r3, #0
 800482c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f383 8811 	msr	BASEPRI, r3
}
 8004834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
	...

08004850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004850:	f3ef 8009 	mrs	r0, PSP
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <pxCurrentTCBConst>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f01e 0f10 	tst.w	lr, #16
 8004860:	bf08      	it	eq
 8004862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004874:	f380 8811 	msr	BASEPRI, r0
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f7fe ffc4 	bl	800380c <vTaskSwitchContext>
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f380 8811 	msr	BASEPRI, r0
 800488c:	bc09      	pop	{r0, r3}
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	f01e 0f10 	tst.w	lr, #16
 800489a:	bf08      	it	eq
 800489c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048a0:	f380 8809 	msr	PSP, r0
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst>:
 80048b0:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
}
 80048d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048d2:	f7fe fee1 	bl	8003698 <xTaskIncrementTick>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <xPortSysTickHandler+0x40>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f383 8811 	msr	BASEPRI, r3
}
 80048ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortSetupTimerInterrupt+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <vPortSetupTimerInterrupt+0x40>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <vPortSetupTimerInterrupt+0x44>)
 800491a:	3b01      	subs	r3, #1
 800491c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010
 8004934:	e000e018 	.word	0xe000e018
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3
 8004940:	e000e014 	.word	0xe000e014

08004944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004954 <vPortEnableVFP+0x10>
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494e:	6001      	str	r1, [r0, #0]
 8004950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004952:	bf00      	nop
 8004954:	e000ed88 	.word	0xe000ed88

08004958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800495e:	f3ef 8305 	mrs	r3, IPSR
 8004962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b0f      	cmp	r3, #15
 8004968:	d914      	bls.n	8004994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <vPortValidateInterruptPriority+0x70>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <vPortValidateInterruptPriority+0x74>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	7afa      	ldrb	r2, [r7, #11]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20a      	bcs.n	8004994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <vPortValidateInterruptPriority+0x78>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <vPortValidateInterruptPriority+0x7c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d90a      	bls.n	80049ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	603b      	str	r3, [r7, #0]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <vPortValidateInterruptPriority+0x60>
	}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000e3f0 	.word	0xe000e3f0
 80049cc:	20000e04 	.word	0x20000e04
 80049d0:	e000ed0c 	.word	0xe000ed0c
 80049d4:	20000e08 	.word	0x20000e08

080049d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049e4:	f7fe fd9c 	bl	8003520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049e8:	4b5b      	ldr	r3, [pc, #364]	; (8004b58 <pvPortMalloc+0x180>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049f0:	f000 f920 	bl	8004c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <pvPortMalloc+0x184>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8093 	bne.w	8004b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01d      	beq.n	8004a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a08:	2208      	movs	r2, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f023 0307 	bic.w	r3, r3, #7
 8004a20:	3308      	adds	r3, #8
 8004a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <pvPortMalloc+0x6c>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	617b      	str	r3, [r7, #20]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06e      	beq.n	8004b28 <pvPortMalloc+0x150>
 8004a4a:	4b45      	ldr	r3, [pc, #276]	; (8004b60 <pvPortMalloc+0x188>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d869      	bhi.n	8004b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a54:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <pvPortMalloc+0x18c>)
 8004a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <pvPortMalloc+0x18c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a5e:	e004      	b.n	8004a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d903      	bls.n	8004a7c <pvPortMalloc+0xa4>
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f1      	bne.n	8004a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <pvPortMalloc+0x180>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d050      	beq.n	8004b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	4413      	add	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d91f      	bls.n	8004ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	613b      	str	r3, [r7, #16]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ae2:	69b8      	ldr	r0, [r7, #24]
 8004ae4:	f000 f908 	bl	8004cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <pvPortMalloc+0x188>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <pvPortMalloc+0x188>)
 8004af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <pvPortMalloc+0x188>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <pvPortMalloc+0x190>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d203      	bcs.n	8004b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <pvPortMalloc+0x188>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <pvPortMalloc+0x190>)
 8004b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <pvPortMalloc+0x184>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <pvPortMalloc+0x194>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a11      	ldr	r2, [pc, #68]	; (8004b6c <pvPortMalloc+0x194>)
 8004b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b28:	f7fe fd08 	bl	800353c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <pvPortMalloc+0x174>
	__asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	60fb      	str	r3, [r7, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <pvPortMalloc+0x172>
	return pvReturn;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3728      	adds	r7, #40	; 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20004a14 	.word	0x20004a14
 8004b5c:	20004a28 	.word	0x20004a28
 8004b60:	20004a18 	.word	0x20004a18
 8004b64:	20004a0c 	.word	0x20004a0c
 8004b68:	20004a1c 	.word	0x20004a1c
 8004b6c:	20004a20 	.word	0x20004a20

08004b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d04d      	beq.n	8004c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b82:	2308      	movs	r3, #8
 8004b84:	425b      	negs	r3, r3
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <vPortFree+0xb8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <vPortFree+0x44>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60fb      	str	r3, [r7, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <vPortFree+0x62>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60bb      	str	r3, [r7, #8]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <vPortFree+0xb8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11a      	bne.n	8004c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <vPortFree+0xb8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bf8:	f7fe fc92 	bl	8003520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <vPortFree+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <vPortFree+0xbc>)
 8004c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f000 f874 	bl	8004cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <vPortFree+0xc0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <vPortFree+0xc0>)
 8004c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c1a:	f7fe fc8f 	bl	800353c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20004a28 	.word	0x20004a28
 8004c2c:	20004a18 	.word	0x20004a18
 8004c30:	20004a24 	.word	0x20004a24

08004c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <prvHeapInit+0xac>)
 8004c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00c      	beq.n	8004c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3307      	adds	r3, #7
 8004c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0307 	bic.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <prvHeapInit+0xac>)
 8004c64:	4413      	add	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <prvHeapInit+0xb0>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <prvHeapInit+0xb0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c80:	2208      	movs	r2, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <prvHeapInit+0xb4>)
 8004c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <prvHeapInit+0xb4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <prvHeapInit+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <prvHeapInit+0xb4>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <prvHeapInit+0xb8>)
 8004cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <prvHeapInit+0xbc>)
 8004cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <prvHeapInit+0xc0>)
 8004cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20000e0c 	.word	0x20000e0c
 8004ce4:	20004a0c 	.word	0x20004a0c
 8004ce8:	20004a14 	.word	0x20004a14
 8004cec:	20004a1c 	.word	0x20004a1c
 8004cf0:	20004a18 	.word	0x20004a18
 8004cf4:	20004a28 	.word	0x20004a28

08004cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <prvInsertBlockIntoFreeList+0xac>)
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e002      	b.n	8004d0c <prvInsertBlockIntoFreeList+0x14>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d8f7      	bhi.n	8004d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d108      	bne.n	8004d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	441a      	add	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d118      	bne.n	8004d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d00d      	beq.n	8004d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e008      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e003      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d002      	beq.n	8004d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20004a0c 	.word	0x20004a0c
 8004da8:	20004a14 	.word	0x20004a14

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	; (8004de4 <__libc_init_array+0x38>)
 8004db0:	4c0d      	ldr	r4, [pc, #52]	; (8004de8 <__libc_init_array+0x3c>)
 8004db2:	1b64      	subs	r4, r4, r5
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	2600      	movs	r6, #0
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <__libc_init_array+0x40>)
 8004dbe:	4c0c      	ldr	r4, [pc, #48]	; (8004df0 <__libc_init_array+0x44>)
 8004dc0:	f000 f82e 	bl	8004e20 <_init>
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	2600      	movs	r6, #0
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08004eb0 	.word	0x08004eb0
 8004de8:	08004eb0 	.word	0x08004eb0
 8004dec:	08004eb0 	.word	0x08004eb0
 8004df0:	08004eb4 	.word	0x08004eb4

08004df4 <memcpy>:
 8004df4:	440a      	add	r2, r1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dfc:	d100      	bne.n	8004e00 <memcpy+0xc>
 8004dfe:	4770      	bx	lr
 8004e00:	b510      	push	{r4, lr}
 8004e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	d1f9      	bne.n	8004e02 <memcpy+0xe>
 8004e0e:	bd10      	pop	{r4, pc}

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
